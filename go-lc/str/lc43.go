package str

func LC43(s1, s2 string) []int {
	n1, n2 := len(s1), len(s2)
	res := make([]int, n1+n2)
	carry := 0

	for j := n2 - 1; j >= 0; j-- {
		for i := n1 - 1; i >= 0; i-- {
			res[i+j+1] += (int(s1[i]-'0') * int(s2[j]-'0')) % 10
			res[i+j] += (int(s1[i]-'0') * int(s2[j]-'0')) / 10
		}
	}
	for i := n1 + n2 - 1; i >= 0; i-- {
		sum := carry + res[i]
		if sum >= 10 {
			res[i] = sum % 10
			carry = sum / 10
		}
	}
	return res
}

// 123
// 456
// 0 0 0 0 0 0

// 0 0 0 0 [1 8] => 0 0 0 0 1 8
// 0 0 0 [1 2] 0 => 0 0 0 1 3 8
// 0 0 0 [6] 0 0 => 0 0 0 7 3 8
// --------------

// 0 0 0 7 3 8

// 0 0 0 1 5 0 => 0 0 0 8 8 8
// 0 0 0 1 0 0 => 0 0 0 9 8 8
// 0 0 0 5 0 0 => 0 0 5 9 8 8
// ---------------

// 0 0 5 9 8 8

// 0 0 0 0 1 2 => 0 0 5 9 9 10
// 0 0 0 0 8 0 => 0 0 0 0 9 2
// 0 0 0 4 0 0 => 0 0 0 4 9 2
